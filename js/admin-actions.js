// js/admin-actions.js

function getCurrentPath() {
    const params = new URLSearchParams(window.location.search);
    const path = [];
    if (params.get("category")) path.push(params.get("category"));
    let i = 1;
    while (params.get("subcategory" + i)) {
      path.push(params.get("subcategory" + i));
      i++;
    }
    return path.join("/"); // –Ω–∞–ø—Ä–∏–º–µ—Ä: "Portrait/Classic"
  }
  
  async function handleResponse(res) {
    if (!res.ok) {
      let msg = "";
      try { msg = await res.text(); } catch (_) {}
      throw new Error(`HTTP ${res.status}${msg ? `: ${msg}` : ""}`);
    }
    try {
      return await res.json();
    } catch {
      return {}; // –Ω–∞ –≤—Å—è–∫–∏–π, –µ—Å–ª–∏ –±—ç–∫–µ–Ω–¥ –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ
    }

  }
  
  // === –°–û–ó–î–ê–¢–¨ –ü–ê–ü–ö–£ (–≤ —Ç–µ–∫—É—â–µ–π –ø–∞–ø–∫–µ) ===
  async function createFolder(folderName) {
    const name = (folderName || "").trim();
    if (!name) { alert("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–∞–ø–∫–∏"); return; }
  
    const basePath = getCurrentPath();
    const folderPath = basePath ? `${basePath}/${name}` : name;
  
    try {
      const res = await fetch("/create-folder", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ folderPath }),
      });
      await handleResponse(res);
      await renderPortfolio();               // üîÑ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∞—Ç—å —Å—Ä–∞–∑—É
    } catch (e) {
      console.error(e);
      alert("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É: " + e.message);
    }
  }
  
  // === –ó–ê–ì–†–£–ó–ò–¢–¨ –§–ê–ô–õ (–≤ —Ç–µ–∫—É—â—É—é –ø–∞–ø–∫—É) ===
  async function uploadFile(file) {
    const formData = new FormData();
  
    // üìå —Å–Ω–∞—á–∞–ª–∞ –ø—É—Ç—å
    const folderPath = getCurrentPath();
    formData.append("folderPath", folderPath);
  
    // üìå –ø–æ—Ç–æ–º —Å–∞–º —Ñ–∞–π–ª
    formData.append("file", file);
  
    const res = await fetch("/upload-file", {
      method: "POST",
      body: formData,
    });
  
    const result = await handleResponse(res);
    await renderPortfolio(); // üîÑ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∞—Ç—å
    return result;
  }
  
  // === –ü–ï–†–ï–ò–ú–ï–ù–û–í–ê–¢–¨ (–≤ —Ç–µ–∫—É—â–µ–π –ø–∞–ø–∫–µ) ===
  async function renameItem(oldName, newName) {
    if (!oldName || !newName) {
      alert("–í–≤–µ–¥–∏—Ç–µ —Å—Ç–∞—Ä–æ–µ –∏ –Ω–æ–≤–æ–µ –∏–º—è");
      return;
    }
   // üö© –ù–û–í–ê–Ø –ü–†–û–í–ï–†–ö–ê: –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
   const oldExt = oldName.split('.').pop(); // –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ —Ñ–∞–π–ª–∞
   if (oldExt && newName.indexOf('.') === -1) {
       newName += '.' + oldExt; // –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –∫ –Ω–æ–≤–æ–º—É –∏–º–µ–Ω–∏
   }

    const folderPath = getCurrentPath(); // –≤ –∫–∞–∫–æ–π –ø–∞–ø–∫–µ –º—ã –Ω–∞—Ö–æ–¥–∏–º—Å—è
    const oldPath = folderPath ? folderPath + "/" + oldName : oldName;
    const newPath = folderPath ? folderPath + "/" + newName : newName;
  
    const res = await fetch("/rename", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ oldPath, newPath }),
    });
  
    await handleResponse(res);
    await renderPortfolio(); // üîÑ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
  }
  
  // === –£–î–ê–õ–ò–¢–¨ (–∏–∑ —Ç–µ–∫—É—â–µ–π –ø–∞–ø–∫–∏) ===
  async function deleteItem(name) {
    const basePath = getCurrentPath();
    const targetPath = basePath ? `${basePath}/${name}` : name;

    try {
        const res = await fetch("/delete", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ targetPath }),
        });
        await handleResponse(res);
        await renderPortfolio();

        // üìå –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º —É–¥–∞–ª—ë–Ω–Ω–æ–º —ç–ª–µ–º–µ–Ω—Ç–µ
        lastDeletedItem = {
            name: name,
            path: targetPath,
            basePath: basePath
        };

        alert("–≠–ª–µ–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω. –í—ã –º–æ–∂–µ—Ç–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –µ–≥–æ.");
    } catch (e) {
        console.error(e);
        alert("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç: " + e.message);
    }
}
  
// === –í–û–°–°–¢–ê–ù–û–í–ò–¢–¨ –ü–û–°–õ–ï–î–ù–ò–ô –£–î–ê–õ–Å–ù–ù–´–ô –≠–õ–ï–ú–ï–ù–¢ ===
async function restoreItem() {
  if (!lastDeletedItem) {
      alert("–ù–µ—Ç —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è.");
      return;
  }

  try {
      const res = await fetch("/restore", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ targetPath: lastDeletedItem.path }),
      });
      await handleResponse(res);
      await renderPortfolio();
      alert("–≠–ª–µ–º–µ–Ω—Ç '" + lastDeletedItem.name + "' —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.");

      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é, —á—Ç–æ–±—ã –Ω–µ–ª—å–∑—è –±—ã–ª–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ
      lastDeletedItem = null;
  } catch (e) {
      console.error(e);
      alert("–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç: " + e.message);
  }
}


  