// generatePortfolioJson.js
import fs from "fs";
import path from "path";

const uploadsDir = path.join(process.cwd(), "uploads");
const outputJson = path.join(process.cwd(), "data", "portfolio.json");

// –°–ø–∏—Å–æ–∫ –ø–∞–ø–æ–∫/—Ñ–∞–π–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –∏—Å–∫–ª—é—á–∞–µ–º
const EXCLUDE = ["tmp", "_tmp", ".git", ".DS_Store"];

function walkDir(dir, baseUrl = "") {
  const result = [];

  for (const item of fs.readdirSync(dir)) {
    // üö´ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –∏ —Å–∫—Ä—ã—Ç—ã–µ
    if (EXCLUDE.includes(item) || item.startsWith(".")) continue;

    const fullPath = path.join(dir, item);
    const relPath = path.join(baseUrl, item);

    try {
      const stat = fs.statSync(fullPath);

      if (stat.isDirectory()) {
        // –ü–∞–ø–∫–∞ ‚Üí –≤—Å–µ–≥–¥–∞ children:[]
        result.push({
          type: "folder",
          name: item,
          path: relPath.replace(/\\/g, "/"),
          children: walkDir(fullPath, relPath) || [], // ‚úÖ –≤—Å–µ–≥–¥–∞ –º–∞—Å—Å–∏–≤
        });
      } else {
        // –§–∞–π–ª ‚Üí –Ω–∏–∫–æ–≥–¥–∞ children
        result.push({
          type: "file",
          name: item,
          path: relPath.replace(/\\/g, "/"),
        });
      }
    } catch (e) {
      console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ ${fullPath}:`, e.message);
    }
  }

  return result;
}

export function generatePortfolioJson() {
  if (!fs.existsSync(uploadsDir)) {
    console.error("‚ùå –ü–∞–ø–∫–∞ uploads –Ω–µ –Ω–∞–π–¥–µ–Ω–∞");
    return;
  }

  const tree = walkDir(uploadsDir);
  console.log("üì¶ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –æ–±—ä–µ–∫—Ç–æ–≤:", tree.length);

  try {
    const jsonData = JSON.stringify(tree, null, 2);
    fs.mkdirSync(path.dirname(outputJson), { recursive: true });
    fs.writeFileSync(outputJson, jsonData, "utf-8");

    // üîç –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å
    JSON.parse(fs.readFileSync(outputJson, "utf-8"));

    console.log(`‚úÖ portfolio.json –æ–±–Ω–æ–≤–ª—ë–Ω: ${outputJson}`);
  } catch (e) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ portfolio.json:", e.message);
  }
}
